1.  When would you want to use a remote repository rather than keeping all your work local?

A:  You would use a remote repository when other people are also working on a project. That way everyone can add to the project without sendig large files or having to be in the same place.


2.  Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A:  Because that way you are able to choose what version of code you would like to have in your local repsoitory. For example someone added a feature that you don't want to implement until later, automatic pulling won't give you the choice of when  to implement those changes and may disrupt your workflow.


3.  Describe the differences between forks, clones, and branches.  When would you use one instead of another?

 You use branches to make parallel versions of your code that can be manipulated without affecting each other. Clone copies a repository from online to your computer, vice versa or from one place locally to another place locally. Fork also copies a repository but only from one github profile to another.


4.  What is the benefit of having a copy of the last known state of the remote stored locally?

A:  It allows you to keep the latest version and your version separate but still gives you access to the lastest version of code so you can compare your version to what has been updated, check out new features that other people have added etc. without affecting your version until you decide that you want to merge them


5.  How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

You can collaborate without Git or GitHub by either working the same room or on the same network as the people you are collaborating with, and sending (large) files back and forth. This would be harder because a lot of tools such a auto merging and auto conflict detection won't be available so it will take up more time. You also won't have access to the complete history of your files. Collaborating like this would be much harder and more time consuming that using Git and GitHub.


6.  When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

    Fill in your answer here
